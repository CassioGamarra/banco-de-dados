/*Visualizar os triggers*/
SHOW TRIGGERS;
/*util para buscar todas as triggers e gerar o comando drop */
SELECT CONCAT('DROP TRIGGER ', TRIGGER_NAME, ';') FROM INFORMATION_SCHEMA.TRIGGERS WHERE TRIGGER_SCHEMA = 'NOME_BANCO'; 

/*Todo trigger possui no final o identificador do mesmo, sendo eles:
* BI = BEFORE INSERT
* BU = BEFORE UPDATE
* AI = AFTER INSERT
* AU = AFTER UPDATE
*/

/*1 - Que atribua 0 (zero) à quantidade atual dos produtos cujo mesmo campo seja nulo. */

DELIMITER //
CREATE TRIGGER T_SET_ZERO_TO_QTD_ATUAL_BI
BEFORE INSERT ON PRODUTO
FOR EACH ROW
BEGIN
	IF (NEW.QUANT_ATUAL IS NULL) OR (NEW.QUANT_ATUAL < 0) THEN
		SET NEW.QUANT_ATUAL = 0;
	END IF;
END;
//DELIMITER ;


DELIMITER //
CREATE TRIGGER T_SET_ZERO_TO_QTD_ATUAL_BU
BEFORE UPDATE ON PRODUTO
FOR EACH ROW
BEGIN
	IF (NEW.QUANT_ATUAL IS NULL) THEN
		SET NEW.QUANT_ATUAL = 0;
	ELSEIF (NEW.QUANT_ATUAL < 0) THEN
		SET NEW.QUANT_ATUAL = OLD.QUANT_ATUAL;
	END IF;
END;
//DELIMITER ;


/*2A - Que evite a inserção de valores redundantes na tabela marca(campos significativos). */
DELIMITER //
CREATE TRIGGER T_VERIFICA_NOME_MARCA_BI
BEFORE INSERT ON MARCA
FOR EACH ROW
BEGIN
	DECLARE MSG VARCHAR(150);
	IF EXISTS(
		SELECT DISTINCT M.ID_MARCA
		FROM MARCA M
		WHERE M.NOME = NEW.NOME
	) THEN
		SET MSG = CONCAT ('A marca: ', new.nome , ' já foi inserida anteriormente');
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = MSG;
	END IF;
END;
//DELIMITER ;

/*2B - Que evite a inserção de valores redundantes em produto(campos significativos)*/
DELIMITER //
CREATE TRIGGER T_VERIFICA_PRODUTO_BI
BEFORE INSERT ON PRODUTO
FOR EACH ROW
BEGIN
	DECLARE MSG VARCHAR(255);
	IF EXISTS(
		SELECT DISTINCT P.ID_PRODUTO
		FROM PRODUTO P
		WHERE P.NOME = NEW.NOME
		AND P.ID_TIPO = NEW.ID_TIPO
		AND P.ID_MARCA = NEW.ID_MARCA
	) THEN
		SET MSG = CONCAT ('O produto: ', new.nome , ' já foi inserido anteriormente');
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = MSG;
	END IF;
END;
//DELIMITER ;

/* 3 -  Que insira um registro na tabela histórico toda vez que um produto seja inserido ou alterado. 
* Verificar em aula quais outros campos preencher, pois essa tabela também recebe o ID_VENDA e ID_COMPRA. E os valores calculados.
*/

ALTER TABLE HISTORICO_ESTOQUE ADD OPERACAO ENUM('I','U','D'), ADD DATA_OPERACAO DATE;

DELIMITER //
CREATE TRIGGER T_INSERT_PROD_HISTORICO_AI
AFTER INSERT ON PRODUTO
FOR EACH ROW
BEGIN
	INSERT INTO HISTORICO_ESTOQUE (ID_PRODUTO, VALOR_UNIT, QUANTIDADE, TOTAL, OPERACAO, DATA_OPERACAO) 
	VALUES (NEW.ID_PRODUTO, NEW.VALOR_VENDA, NEW.QUANT_ATUAL, (NEW.QUANT_ATUAL * NEW.VALOR_VENDA), 'I', CURDATE());
END;
//DELIMITER ;

DELIMITER //
CREATE TRIGGER T_INSERT_PROD_HISTORICO_AU
AFTER UPDATE ON PRODUTO
FOR EACH ROW
BEGIN
	DECLARE QTD DECIMAL(15,2);
	
	SET QTD = ABS(OLD.QUANT_ATUAL - NEW.QUANT_ATUAL);
	
	INSERT INTO HISTORICO_ESTOQUE (ID_PRODUTO, VALOR_UNIT, QUANTIDADE, TOTAL, OPERACAO, DATA_OPERACAO) 
	VALUES (NEW.ID_PRODUTO, NEW.VALOR_VENDA, QTD, (QTD * NEW.VALOR_VENDA), 'U', CURDATE());
END;
//DELIMITER ;

DELIMITER //
CREATE TRIGGER T_INSERT_PROD_HISTORICO_AD
AFTER DELETE ON PRODUTO
FOR EACH ROW
BEGIN
	INSERT INTO HISTORICO_ESTOQUE (ID_PRODUTO, VALOR_UNIT, QUANTIDADE, TOTAL, OPERACAO, DATA_OPERACAO) 
	VALUES (OLD.ID_PRODUTO, OLD.VALOR_VENDA, OLD.QUANT_ATUAL, (OLD.QUANT_ATUAL * OLD.VALOR_VENDA), 'D', CURDATE());
END;
//DELIMITER ;


 
/* 4 -  Que ao inserir um ITENS_VENDA, busque o valor do produto (tabela PRODUTOS) e atribua ao valor unitário de ITENS_VENDA. */
DELIMITER //
CREATE TRIGGER T_ATRIB_VALOR_UNIT_VENDA_BI
BEFORE INSERT ON ITENS_VENDA
FOR EACH ROW
BEGIN
	DECLARE VALOR DECIMAL(15,2);
	
	SELECT P.VALOR_VENDA INTO VALOR
	FROM PRODUTO P
	WHERE P.ID_PRODUTO = NEW.ID_PRODUTO;
	
	SET NEW.VALOR_UNIT = VALOR;
	SET NEW.TOTAL = VALOR*NEW.QUANTIDADE;
END;
//DELIMITER ;

/*Quanto atualiza itens_venda*/

DELIMITER //
CREATE TRIGGER T_ATRIB_VALOR_UNIT_VENDA_BU
BEFORE UPDATE ON ITENS_VENDA
FOR EACH ROW
BEGIN
	SET NEW.TOTAL = NEW.VALOR_UNIT*NEW.QUANTIDADE;
END;
//DELIMITER ;