/*1 - Criar triggers para calcular o valor total do produto após inserir/atualizar 
um item da compra (caso a compra não tenha sido finalizada). 
Calcular o subtotal e total da compra.*/

/*Procedure para verificar se uma compra ou venda já foi finalizada*/
DELIMITER //
CREATE PROCEDURE SP_VERIFICA_FINALIZADA(IN OP CHAR(1), IN SP_ID_CV INT)
BEGIN
    DECLARE IS_FINALIZADA BOOLEAN;
    DECLARE MSG VARCHAR(150);

    IF OP = 'C' THEN
        SELECT C.FINALIZADA INTO IS_FINALIZADA
        FROM COMPRA C
        WHERE C.ID_COMPRA = SP_ID_CV;
    ELSEIF OP = 'V' THEN
        SELECT V.FINALIZADA INTO IS_FINALIZADA
        FROM VENDA V
        WHERE V.ID_VENDA = SP_ID_CV;
    ELSE
        SET MSG = CONCAT ('Operação inválida!');
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = MSG;
    END IF;

    IF IS_FINALIZADA THEN
        SET MSG = CONCAT ('Compra/Venda já finalizada!');
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = MSG;
    END IF;
END;
//DELIMITER ;

/*PROCEDURE PARA CALCULAR O SUBTOTAL E TOTAL DE COMPRA*/
DELIMITER //
CREATE PROCEDURE SP_CALC_SUBOTAL_TOTAL_CV(IN OP CHAR(1), IN SP_ID_CV INT)
BEGIN
    DECLARE MSG VARCHAR(150);
    DECLARE SUBTOTAL DECIMAL(15,2);

    IF OP = 'C' THEN
        SELECT SUM(IC.TOTAL) INTO SUBTOTAL
        FROM ITENS_COMPRA IC
	    WHERE IC.ID_COMPRA = SP_ID_CV;

        UPDATE COMPRA C
        SET C.SUB_TOTAL = SUBTOTAL,
            C.TOTAL = SUBTOTAL - (SUBTOTAL * C.DESCONTO)/100	
        WHERE C.ID_COMPRA = SP_ID_CV;
    ELSEIF OP = 'V' THEN
        SELECT SUM(IV.TOTAL) INTO SUBTOTAL
        FROM ITENS_VENDA IV
        WHERE IV.ID_VENDA = SP_ID_CV;

        UPDATE VENDA V
        SET V.SUB_TOTAL = SUBTOTAL,
            V.TOTAL = SUBTOTAL - (SUBTOTAL * V.DESCONTO)/100
        WHERE V.ID_VENDA = SP_ID_CV;
    ELSE
        SET MSG = CONCAT ('Operação inválida!');
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = MSG; 
    END IF;
END;
//DELIMITER ;

/*Procedure para buscar o valor de venda de um produto*/
DELIMITER //
CREATE PROCEDURE SP_BUSCA_VALOR_VENDA(IN SP_ID_PROD INT, OUT VALOR DECIMAL(15,2))
BEGIN
    SELECT P.VALOR_VENDA INTO VALOR
    FROM PRODUTO P
    WHERE P.ID_PRODUTO = SP_ID_PROD;
END;
//DELIMITER ;


/*Trigger para atualizar o valor total de um item na venda*/
DELIMITER //
CREATE TRIGGER T_ATRIB_VALOR_UNIT_VENDA_BI
BEFORE INSERT ON ITENS_VENDA
FOR EACH ROW
BEGIN
	DECLARE VALOR DECIMAL (15,2);
    CALL SP_VERIFICA_FINALIZADA('V', NEW.ID_VENDA);
    CALL SP_BUSCA_VALOR_VENDA(NEW.ID_PRODUTO, NEW.VALOR_UNIT);

	SET NEW.TOTAL = VALOR*NEW.QUANTIDADE;
END;
//DELIMITER ;

/*Ao atualizar um item na venda*/
DELIMITER //
CREATE TRIGGER T_ATRIB_VALOR_UNIT_VENDA_BU
BEFORE UPDATE ON ITENS_VENDA
FOR EACH ROW
BEGIN
    CALL SP_VERIFICA_FINALIZADA('V', NEW.ID_VENDA);
	SET NEW.TOTAL = NEW.VALOR_UNIT*NEW.QUANTIDADE;
END;
//DELIMITER ;

/*Atualiza o valor de uma venda*/
DELIMITER //
CREATE TRIGGER T_ATUALIZA_SUB_TOTAL_VENDA_AI
AFTER INSERT ON ITENS_VENDA
FOR EACH ROW
BEGIN
    CALL SP_VERIFICA_FINALIZADA('V', NEW.ID_VENDA);
	CALL SP_CALC_SUBOTAL_TOTAL_CV('V', NEW.ID_VENDA);
END;
//DELIMITER ;

DELIMITER //
CREATE TRIGGER T_ATUALIZA_SUB_TOTAL_VENDA_AI
AFTER UPDATE ON ITENS_VENDA
FOR EACH ROW
BEGIN
    CALL SP_VERIFICA_FINALIZADA('V', NEW.ID_VENDA);
	CALL SP_CALC_SUBOTAL_TOTAL_CV('V', NEW.ID_VENDA);
END;
//DELIMITER ;

/*2 - Criar triggers para calcular o valor total do produto após inserir/atualizar um item da venda (caso a venda não tenha sido finalizada). Calcular o subtotal e total da venda.*/

/*Trigger para atualizar o valor total de um item na compra*/
DELIMITER //
CREATE TRIGGER T_ATRIB_VALOR_UNIT_COMPRA_BI
BEFORE INSERT ON ITENS_COMPRA
FOR EACH ROW
BEGIN
    CALL SP_VERIFICA_FINALIZADA('C', NEW.ID_COMPRA);
	SET NEW.TOTAL = NEW.VALOR_UNIT*NEW.QUANTIDADE;
END;
//DELIMITER ;

/*Ao atualizar um item na compra*/
DELIMITER //
CREATE TRIGGER T_ATRIB_VALOR_UNIT_COMPRA_BU
BEFORE UPDATE ON ITENS_COMPRA
FOR EACH ROW
BEGIN
    CALL SP_VERIFICA_FINALIZADA('C', NEW.ID_COMPRA);
	SET NEW.TOTAL = NEW.VALOR_UNIT*NEW.QUANTIDADE;
END;
//DELIMITER ;

/*3 - Criar uma Visão que mostre a data da venda, numero da NF, subtotal, desconto, total e o nome do cliente para as vendas do ano de 2020*/
CREATE VIEW V_DETALHES_VENDA(DATA_VENDA, NOTA_FISCAL, SUB_TOTAL, DESCONTO, TOTAL, CLIENTE)
AS
SELECT V.DATA_VENDA, V.NUMERO_NF, V.SUB_TOTAL, V.DESCONTO, V.TOTAL, C.NOME
FROM VENDA V
INNER JOIN CLIENTE C ON V.ID_CLIENTE = C.ID_CLIENTE
WHERE YEAR(V.DATA_VENDA) = 2020
ORDER BY 1;
/*4 - Fazer uma stored procedure que receba como parâmetro de entrada o código do cliente e calcule o número de vendas que o mesmo realizou, efetuando a atualização do número de vendas (tabela CLIENTE).*/
DELIMITER //
CREATE PROCEDURE SP_CALC_NUM_VENDAS_CLI(IN SP_ID_CLIENTE INT)
BEGIN
    DECLARE NUM_VENDAS INT;

    SELECT COUNT(V.ID_VENDA) INTO NUM_VENDAS
    FROM VENDA V
    WHERE V.ID_CLIENTE = SP_ID_CLIENTE AND FINALIZADA = 1;

    UPDATE CLIENTE C
    SET C.NUMERO_VENDAS = NUM_VENDAS
    WHERE C.ID_CLIENTE = SP_ID_CLIENTE;
END;
//DELIMITER ;
/*5 - Criar uma visão que mostre todos os produtos vendidos de uma marca específica nos 2 primeiros meses do 2º semestre do ano de 2020.*/
CREATE VIEW V_PRODUTOS_VENDIDOS (NOME, MARCA)
AS
SELECT P.NOME, M.NOME
FROM ITENS_VENDA IV
INNER JOIN VENDA V ON IV.ID_VENDA = V.ID_VENDA
INNER JOIN PRODUTO P ON IV.ID_PRODUTO = P.ID_PRODUTO
INNER JOIN MARCA M ON P.ID_MARCA = M.ID_MARCA
WHERE MONTH(V.DATA_VENDA) BETWEEN 6 AND 12;
/*6 - Elaborar uma Stored Procedure que receba como parâmetro TODOS os dados de um PRODUTO (exceto as IDs), juntamente com o nome da marca e o nome do tipo.
    Verificar se a MARCA e TIPO existem em suas respectivas tabelas e retornar suas IDs.
    Caso não existam, inserir na respectiva tabela e recuperar a ID.
    Inserir os dados completos do PRODUTO.*/
DELIMITER //
CREATE PROCEDURE SP_INSERE_PRODUTO(IN SP_NOME_PROD VARCHAR(60), IN SP_QTD_MIN DECIMAL(15,2), IN SP_QTD_ATUAL DECIMAL(15,2), IN SP_VALOR_VENDA DECIMAL(15,2), IN SP_MARCA VARCHAR(60), IN SP_TIPO VARCHAR(60))
BEGIN
    DECLARE SP_ID_MARCA INT;
    DECLARE SP_ID_TIPO INT;

    SELECT M.ID_MARCA INTO SP_ID_MARCA
    FROM MARCA M
    WHERE M.NOME = SP_MARCA;

    SELECT T.ID_TIPO INTO SP_ID_TIPO
    FROM TIPO T
    WHERE T.NOME = SP_TIPO;

    IF SP_ID_MARCA IS NULL THEN
        INSERT INTO MARCA
        SET NOME = SP_MARCA;

        SELECT LAST_INSERT_ID() INTO SP_ID_MARCA;
    END IF;

    IF SP_ID_TIPO  IS NULL THEN
        INSERT INTO TIPO
        SET NOME = SP_TIPO;

        SELECT LAST_INSERT_ID() INTO SP_ID_TIPO;
    END IF;

    INSERT INTO PRODUTO (ID_TIPO, ID_MARCA, NOME, QUANT_MINIMA, QUANT_ATUAL, VALOR_VENDA)
    VALUES (SP_ID_TIPO, SP_ID_MARCA, SP_NOME_PROD, SP_QTD_MIN, SP_QTD_ATUAL, SP_VALOR_VENDA);
END;
// DELIMITER ;
